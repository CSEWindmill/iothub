// Code generated by MockGen. DO NOT EDIT.
// Source: ./iotdevice/client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	iotdevice "github.com/amenzhinsky/iothub/iotdevice"
	iotservice "github.com/amenzhinsky/iothub/iotservice"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Connect mocks base method.
func (m *MockClient) Connect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockClientMockRecorder) Connect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClient)(nil).Connect), ctx)
}

// CreateModule mocks base method.
func (m_2 *MockClient) CreateModule(ctx context.Context, m *iotservice.Module) (*iotservice.Module, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateModule", ctx, m)
	ret0, _ := ret[0].(*iotservice.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModule indicates an expected call of CreateModule.
func (mr *MockClientMockRecorder) CreateModule(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModule", reflect.TypeOf((*MockClient)(nil).CreateModule), ctx, m)
}

// DeleteModule mocks base method.
func (m_2 *MockClient) DeleteModule(ctx context.Context, m *iotservice.Module) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "DeleteModule", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModule indicates an expected call of DeleteModule.
func (mr *MockClientMockRecorder) DeleteModule(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModule", reflect.TypeOf((*MockClient)(nil).DeleteModule), ctx, m)
}

// DeviceID mocks base method.
func (m *MockClient) DeviceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// DeviceID indicates an expected call of DeviceID.
func (mr *MockClientMockRecorder) DeviceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceID", reflect.TypeOf((*MockClient)(nil).DeviceID))
}

// GetModule mocks base method.
func (m *MockClient) GetModule(ctx context.Context, moduleID string) (*iotservice.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModule", ctx, moduleID)
	ret0, _ := ret[0].(*iotservice.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModule indicates an expected call of GetModule.
func (mr *MockClientMockRecorder) GetModule(ctx, moduleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModule", reflect.TypeOf((*MockClient)(nil).GetModule), ctx, moduleID)
}

// ListModules mocks base method.
func (m *MockClient) ListModules(ctx context.Context) ([]*iotservice.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModules", ctx)
	ret0, _ := ret[0].([]*iotservice.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModules indicates an expected call of ListModules.
func (mr *MockClientMockRecorder) ListModules(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModules", reflect.TypeOf((*MockClient)(nil).ListModules), ctx)
}

// ModuleConnectionString mocks base method.
func (m *MockClient) ModuleConnectionString(module *iotservice.Module, secondary bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleConnectionString", module, secondary)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleConnectionString indicates an expected call of ModuleConnectionString.
func (mr *MockClientMockRecorder) ModuleConnectionString(module, secondary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleConnectionString", reflect.TypeOf((*MockClient)(nil).ModuleConnectionString), module, secondary)
}

// RegisterMethod mocks base method.
func (m *MockClient) RegisterMethod(ctx context.Context, name string, fn iotdevice.DirectMethodHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMethod", ctx, name, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMethod indicates an expected call of RegisterMethod.
func (mr *MockClientMockRecorder) RegisterMethod(ctx, name, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMethod", reflect.TypeOf((*MockClient)(nil).RegisterMethod), ctx, name, fn)
}

// RetrieveTwinState mocks base method.
func (m *MockClient) RetrieveTwinState(ctx context.Context) (iotdevice.TwinState, iotdevice.TwinState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveTwinState", ctx)
	ret0, _ := ret[0].(iotdevice.TwinState)
	ret1, _ := ret[1].(iotdevice.TwinState)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetrieveTwinState indicates an expected call of RetrieveTwinState.
func (mr *MockClientMockRecorder) RetrieveTwinState(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveTwinState", reflect.TypeOf((*MockClient)(nil).RetrieveTwinState), ctx)
}

// SendEvent mocks base method.
func (m *MockClient) SendEvent(ctx context.Context, payload []byte, opts ...iotdevice.SendOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, payload}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEvent", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockClientMockRecorder) SendEvent(ctx, payload interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, payload}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockClient)(nil).SendEvent), varargs...)
}

// SubscribeEvents mocks base method.
func (m *MockClient) SubscribeEvents(ctx context.Context) (*iotdevice.EventSub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeEvents", ctx)
	ret0, _ := ret[0].(*iotdevice.EventSub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeEvents indicates an expected call of SubscribeEvents.
func (mr *MockClientMockRecorder) SubscribeEvents(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvents", reflect.TypeOf((*MockClient)(nil).SubscribeEvents), ctx)
}

// SubscribeTwinUpdates mocks base method.
func (m *MockClient) SubscribeTwinUpdates(ctx context.Context) (*iotdevice.TwinStateSub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTwinUpdates", ctx)
	ret0, _ := ret[0].(*iotdevice.TwinStateSub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeTwinUpdates indicates an expected call of SubscribeTwinUpdates.
func (mr *MockClientMockRecorder) SubscribeTwinUpdates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTwinUpdates", reflect.TypeOf((*MockClient)(nil).SubscribeTwinUpdates), ctx)
}

// UnregisterMethod mocks base method.
func (m *MockClient) UnregisterMethod(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterMethod", name)
}

// UnregisterMethod indicates an expected call of UnregisterMethod.
func (mr *MockClientMockRecorder) UnregisterMethod(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterMethod", reflect.TypeOf((*MockClient)(nil).UnregisterMethod), name)
}

// UnsubscribeEvents mocks base method.
func (m *MockClient) UnsubscribeEvents(sub *iotdevice.EventSub) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsubscribeEvents", sub)
}

// UnsubscribeEvents indicates an expected call of UnsubscribeEvents.
func (mr *MockClientMockRecorder) UnsubscribeEvents(sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeEvents", reflect.TypeOf((*MockClient)(nil).UnsubscribeEvents), sub)
}

// UnsubscribeTwinUpdates mocks base method.
func (m *MockClient) UnsubscribeTwinUpdates(sub *iotdevice.TwinStateSub) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsubscribeTwinUpdates", sub)
}

// UnsubscribeTwinUpdates indicates an expected call of UnsubscribeTwinUpdates.
func (mr *MockClientMockRecorder) UnsubscribeTwinUpdates(sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeTwinUpdates", reflect.TypeOf((*MockClient)(nil).UnsubscribeTwinUpdates), sub)
}

// UpdateModule mocks base method.
func (m_2 *MockClient) UpdateModule(ctx context.Context, m *iotservice.Module) (*iotservice.Module, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateModule", ctx, m)
	ret0, _ := ret[0].(*iotservice.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModule indicates an expected call of UpdateModule.
func (mr *MockClientMockRecorder) UpdateModule(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModule", reflect.TypeOf((*MockClient)(nil).UpdateModule), ctx, m)
}

// UpdateTwinState mocks base method.
func (m *MockClient) UpdateTwinState(ctx context.Context, s iotdevice.TwinState) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTwinState", ctx, s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTwinState indicates an expected call of UpdateTwinState.
func (mr *MockClientMockRecorder) UpdateTwinState(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTwinState", reflect.TypeOf((*MockClient)(nil).UpdateTwinState), ctx, s)
}

// UploadFile mocks base method.
func (m *MockClient) UploadFile(ctx context.Context, blobName string, file io.Reader, size int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, blobName, file, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockClientMockRecorder) UploadFile(ctx, blobName, file, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockClient)(nil).UploadFile), ctx, blobName, file, size)
}
